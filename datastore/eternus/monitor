#!/bin/bash

# OpenNebula driver for Fujitsu Eternus DX series
# https://github.com/deepthinkag/OpenNebula-addon-eternus/
# <fhe@deepthink.ag>
# <me@florianheigl.me>

#PHASE: INIT
#monitor: monitors a datastore
#ARGUMENTS: datastore_action_dump image_id
#datastore_image_dump is an XML dump of the driver action encoded in Base 64. See a decoded example.
#monitor data The monitoring information of the datastore, namely “USED_MB=…\nTOTAL_MB=…\nFREE_MB=…” which are respectively the used size of the datastore in MB, the total capacity of the datastore in MB and the available space in the datastore in MB.

# -------- Set up the environment to source common tools & conf ------------

#set -u

[[ $# == 2 ]] || exit 1
DRV_ACTION="${1}"
ID="${2}"

if [ -z "${ONE_LOCATION}" ]; then
    LIB_LOCATION=/usr/lib/one
else
    LIB_LOCATION=$ONE_LOCATION/lib
fi

DRV_PATH=$(dirname  "$0")
DRV_TASK=$(basename "$0")


# source opennebula tools and eternus scripts
for lib in ${LIB_LOCATION}/sh/scripts_common.sh ${DRV_PATH}/../libfs.sh ${DRV_PATH}/scripts_eternus.sh; do
    (bash -eun "$lib" && source "$lib") || { echo "Error: failed to set up driver"; exit 1; }
done

# library
get_xpath_info

if [[ $DEBUG = "YES" ]]; then
    echo "$DRV_ACTION" > /var/tmp/one/eternus-"${DRV_TASK}".params
    exec &> >(tee /var/tmp/one/eternus-"${DRV_TASK}.log")
fi

#PHASE: PREP
HOST=$( get_destination_host )
# point at system with network access to mgmt ip *AND .ssh/config set up*

if [ -z "$HOST" ]; then
    error_message "Datastore template missing 'BRIDGE_LIST' attribute."
    exit 1
fi

#PHASE: RUN

# ------------ Compute datastore usage -------------
# complete output: see doc/commands-overview.md
# this catches the following line:
#   0 RG-1            Online       RAID1+0  Available          38.44 TB    58.03 TB        151 610.62 GB   Normal        90       - Disable       21
MONITOR_SCRIPT=$(cat <<EOF
    TP_USAGE="$( ssh "${ARRAY_MGMT_IP}" "show thin-pro-pools" 2>&1 | grep -v -E '(^Thin|^No)' | grep "${ARRAY_POOL_NAME}" )"
    echo "\${TP_USAGE}"
EOF
)


# TODO: precond: validate output by regex
MONITOR_DATA=$(ssh_monitor_and_log "${HOST}" "${MONITOR_SCRIPT}")
MONITOR_STATUS=$?

#PHASE: POST
#RETURNS: monitor data
# TODO: postcond: validate generated monitor result
# if MONITOR_DATA matches MONITOR_DATA_REGEX ]; then
if [ $MONITOR_STATUS = 0 ]; then
    echo "${MONITOR_DATA}" | awk \
         '{ if( $7 == "TB")  $6 *= 1024 * 1024; phys_total =  $6 }
          { if( $7 == "GB")  $6 *= 1024;        phys_total =  $6 }
          { if( $9 == "TB")  $8 *= 1024 * 1024; prov_total =  $8 }
          { if( $9 == "GB")  $8 *= 1024;        prov_total =  $8 }
          { if($12 == "TB") $11 *= 1024 * 1024;       used = $11 }
          { if($12 == "GB") $11 *= 1024;              used = $11 }
          END { printf "TOTAL_MB=%d\nUSED_MB=%d\nFREE_MB=%d\n",
                prov_total, phys_total, prov_total - used }'
fi


exit $MONITOR_STATUS
