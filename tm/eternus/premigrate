#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2019, FeldHostâ„¢ (feldhost.net)                                   #
#                                                                            #
# Portions copyright 2014-2016, Laurent Grawet <dev@grawet.be>               #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

# PREMIGRATE SOURCE DST remote_system_dir vmid dsid template
#  - SOURCE is the host where the VM is running
#  - DST is the host where the VM is to be migrated
#  - remote_system_dir is the path for the VM home in the system datastore
#  - vmid is the id of the VM
#  - dsid is the target datastore
#  - template is the template of the VM in XML and base64 encoded

SRC_HOST=$1
DST_HOST=$2

DST_PATH=$3

VMID=$4
DSID=$5

#TEMPLATE_64=$(cat)
TEMPLATE_64=$6

DRV_TASK=tm-premigrate
DEBUG=YES
if [[ $DEBUG = "YES" ]]; then
    #set -x
    echo "${*}" > /var/tmp/one/eternus-"${DRV_TASK}".params
    exec &> >(tee /var/tmp/one/eternus-"${DRV_TASK}.log")
    echo "
SRC_HOST=$1
DST_HOST=$2
DST_PATH=$3
VMID=$4
DSID=$5
TEMPLATE=$6
SYSTEM_MAD=$7"
fi

#--------------------------------------------------------------------------------

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

source $TMCOMMON

DRIVER_PATH=$(dirname $0)

. ${DRIVER_PATH}/../../datastore/eternus/scripts_eternus.sh
ARRAY_MGMT_IP=192.168.1.60

#--------------------------------------------------------------------------------

if [ "$SRC_HOST" == "$DST_HOST" ]; then
    log "Not moving $SRC_HOST to $DST_HOST, they are the same host"
    exit 0
fi

#--------------------------------------------------------------------------------

#if [ -n "$7" ]; then
#    log "Called from tm/$7 but I've nothing to do"
#    exit 0
#fi

#--------------------------------------------------------------------------------
# Move deployment files to dst host
#--------------------------------------------------------------------------------

DST_PATH_DIRNAME=`dirname $DST_PATH`
DST_PATH_BASENAME=`basename $DST_PATH`

ssh_make_path "$DST_HOST" "$DST_PATH"

log "Moving $SRC_HOST:$DST_PATH to $DST_HOST:$DST_PATH"

ssh_exec_and_log "$DST_HOST" "rm -rf '$DST_PATH'" \
    "Error removing target path to prevent overwrite errors"

TAR_SSH=$(cat <<EOF
set -e -o pipefail
tar -C $DST_PATH_DIRNAME --sparse -cf - $DST_PATH_BASENAME | $SSH $DST_HOST 'tar -C $DST_PATH_DIRNAME --sparse -xf -'
EOF
)

ssh_exec_and_log "$SRC_HOST" "$TAR_SSH" "Error copying disk directory to target host"

#--------------------------------------------------------------------------------
# Discover luns on dst host
#--------------------------------------------------------------------------------

i=1
while read line
do
    DISK_IDS[$i]="$line"
    (( i++ ))
done < <(onevm show $VMID --all | grep -w "DISK_ID" | $CUT -d\" -f2)

for j in `seq 1 ${#DISK_IDS[*]}`; do
    XPATH="${DRIVER_PATH}/../../datastore/xpath.rb -b $TEMPLATE_64"

    unset i k XPATH_ELEMENTS

    while IFS= read -r -d '' element; do
        XPATH_ELEMENTS[i++]="$element"
    done < <($XPATH     /VM/TEMPLATE/DISK[DISK_ID=${DISK_IDS[$j]}]/SOURCE \
                        /VM/TEMPLATE/DISK[DISK_ID=${DISK_IDS[$j]}]/TM_MAD \
                        /VM/TEMPLATE/DISK[DISK_ID=${DISK_IDS[$j]}]/CLONE \
                        /VM/TEMPLATE/DISK[DISK_ID=${DISK_IDS[$j]}]/SOURCE \
                        /VM/TEMPLATE/DISK[DISK_ID=${DISK_IDS[$j]}]/DISK_ID \
                        /VM/HISTORY_RECORDS/HISTORY[last\(\)]/DS_ID)

    NAME_WWN=${XPATH_ELEMENTS[k++]}
    TM_MAD=${XPATH_ELEMENTS[k++]}
    CLONE=${XPATH_ELEMENTS[k++]}
    SOURCE=${XPATH_ELEMENTS[k++]}
    DISK_ID=${XPATH_ELEMENTS[k++]}
    SYS_DSID=${XPATH_ELEMENTS[k++]}

    if [ "$TM_MAD" = "eternus" ]; then
        if [ "$CLONE" == "YES" ]; then
            #-------------------------------------------------------------------------------
            # Get system ds information
            #-------------------------------------------------------------------------------

            # get VM disk WWN
            #      <SOURCE><![CDATA[one-111:600000e00d2c0000002c13f800080000]]></SOURCE>
            NAME=$(get_vv_name "$SOURCE")
            NAME=${NAME}-${VMID}-${DISK_ID}
            WWN=$( eternus_get_vvol_uid $NAME $ARRAY_MGMT_IP )
            NAME_WWN="${NAME}:${WWN}"

            if [ $? -ne 0 ]; then
              error_message "$NAME_WWN"
              exit 1
            fi
        fi

        NAME=$(get_vv_name "$NAME_WWN")
        WWN=$(get_vv_wwn "$NAME_WWN")

        log "Mapping $NAME_WWN to $DST_HOST"

        LUN=$( eternus_map "$ARRAY_MGMT_IP" "$DST_HOST" "$NAME" )

        if [ $? -ne 0 ]; then
          error_message "$LUN"
          exit 1
        fi

        DISCOVER_CMD=$(cat <<EOF
            set -e
            $(discover_lun "$LUN" "$WWN")
EOF
)

        ssh_exec_and_log "$DST_HOST" "$DISCOVER_CMD" \
            "Error registering $NAME_WWN to $DST_HOST"
    fi
done

migrate_other "$@"

exit 0
