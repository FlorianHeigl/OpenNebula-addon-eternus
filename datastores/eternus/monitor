#!/bin/bash

###############################################################################
# This script is used to monitor the free and used space of a datastore
###############################################################################

# -------- Set up the environment to source common tools & conf ------------

if [ -z "${ONE_LOCATION}" ]; then
    LIB_LOCATION=/usr/lib/one
else
    LIB_LOCATION=$ONE_LOCATION/lib
fi

. $LIB_LOCATION/sh/scripts_common.sh

DRIVER_PATH=$(dirname $0)
source ${DRIVER_PATH}/../libfs.sh

# -------- Get datastore arguments from OpenNebula core ------------

DRV_ACTION=$1
ID=$2

XPATH="${DRIVER_PATH}/../xpath.rb -b $DRV_ACTION"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <($XPATH     /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/BRIDGE_LIST   \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/ARRAY_NAME    \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/ARRAY_MGMTIP)
# ARRAY_NAME name of the eternus storage under THIS datastore
# ARRAY_MGMTIP management ip address of the eternus storage under THIS datastore
# we assume only one raid group per array, we assume one initiator group
# the driver does not handle any group operation, you need already
# attached and multipathed storage connectivity

unset i

BRIDGE_LIST="${XPATH_ELEMENTS[i++]}"
ARRAY_NAME="${XPATH_ELEMENTS[i++]}"
ARRAY_MGMTIP="${XPATH_ELEMENTS[i++]}"

HOST=$( get_destination_host )
# point at system with network access to mgmt ip *AND .ssh/config set up*

if [ -z "$HOST" ]; then
    error_message "Datastore template missing 'BRIDGE_LIST' attribute."
    exit 1
fi

# ------------ Compute datastore usage -------------
# complete output: see doc/commands-overview.md
# this catches the following line:
#   0 RG-1            Online       RAID1+0  Available          38.44 TB    58.03 TB        151 610.62 GB   Normal        90       - Disable       21
MONITOR_SCRIPT=$(cat <<EOF
    TP_USAGE="$( ssh "${ARRAY_MGMTIP}" "show thin-pro-pools" 2>&1 | grep -E '(^Thin|^No|^[ 0-9])' | tail -1 )"
    echo "\${TP_USAGE}"
EOF
)


# TODO: precond: validate output by regex
MONITOR_DATA=$(ssh_monitor_and_log "${HOST}" "${MONITOR_SCRIPT}")
MONITOR_STATUS=$?


# TODO: postcond: validate generated monitor result
# if MONITOR_DATA matches MONITOR_DATA_REGEX ]; then
if [ $MONITOR_STATUS = 0 ]; then
    echo "${MONITOR_DATA}" | awk \
         '{ if( $7 == "TB")  $6 *= 1024 * 1024; phys_total =  $6 }
          { if( $7 == "GB")  $6 *= 1024;        phys_total =  $6 }
          { if( $9 == "TB")  $8 *= 1024 * 1024; prov_total =  $8 }
          { if( $9 == "GB")  $8 *= 1024;        prov_total =  $8 }
          { if($12 == "TB") $11 *= 1024 * 1024;       used = $11 }
          { if($12 == "GB") $11 *= 1024;              used = $11 }
          END { printf "TOTAL_MB=%d\nUSED_MB=%d\nFREE_MB=%d\n",
                prov_total, phys_total, prov_total - used }'
fi



exit $MONITOR_STATUS
